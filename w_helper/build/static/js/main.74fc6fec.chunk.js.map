{"version":3,"sources":["actions/countAction.js","reducers/countReducer.js","store/createStore.js","components/OptionView.js","containers/home.js","App.js","serviceWorker.js","index.js"],"names":["COUNT_ADD","_state","countReducer","state","arguments","length","undefined","type","logger","createLogger","duration","enhancer","compose","applyMiddleware","createStore","data","rootReducer","combineReducers","count","OptionView","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onCancelUser","i","selectedUserList","splice","setState","renderSelectedUserList","map","user","react_default","a","createElement","antd_mobile_es","selected","small","onChange","Array","join","split","v","Component","Count","onSelectChange","selectIndex","renderTabList","_this$state","tabList","_this$props","countAddAction","ItemComponent","Item","icon","uri","selectedIcon","title","key","concat","onPress","style","position","height","width","top","unselectedTintColor","tintColor","barTintColor","hidden","tabBarPosition","prerenderingSiblingsNumber","connect","App","es","store","className","home","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.74fc6fec.chunk.js","sourcesContent":["const COUNT_ADD = 'count_add';\n\nfunction countAddAction() {\n    return {\n        type: COUNT_ADD\n    }\n}\n\nexport {\n    countAddAction,\n    COUNT_ADD\n}","import { COUNT_ADD } from '../actions/countAction';\nlet _state = 0;\n\nfunction countReducer(state = _state, action) {\n    switch(action.type) {\n        case COUNT_ADD:\n            return state + 1;\n        default:\n            return state;\n    }\n}\n\nexport {\n    countReducer\n}","import { createStore, applyMiddleware, combineReducers, compose } from \"redux\";\nimport { createLogger } from 'redux-logger';\nimport { countReducer } from '../reducers/countReducer';\n\nconst logger = createLogger({\n    duration: true\n});\n\nconst enhancer = compose(\n    applyMiddleware(logger),\n);\n\nexport default (data = {}) => {\n    const rootReducer = combineReducers({\n        count: countReducer\n    });\n\n    return createStore(rootReducer, data, enhancer);\n}","import React, { Component } from \"react\";\nimport { Tag } from 'antd-mobile';\n\nexport default class OptionView extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            selectedUserList: new Array(10).join('-').split('-').map((v, i) => i)\n        }\n    }\n\n    onCancelUser = (i) => () => {\n        const { selectedUserList } = this.state;\n\n        selectedUserList.splice(i, 1);\n        this.setState( selectedUserList );\n    }\n\n    renderSelectedUserList = () => {\n        const { selectedUserList } = this.state;\n\n        return selectedUserList.map((user, i) => {\n            return <Tag selected small onChange={this.onCancelUser(i)}>{user}</Tag>;\n        });\n    }\n\n    render () {\n        return (\n            <div>\n                <div>\n                    已勾选：\n                </div>\n                <div>\n                    {this.renderSelectedUserList()}\n                </div>\n            </div>\n        );\n        \n    }\n}","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { countAddAction } from '../actions/countAction';\nimport { Button, TabBar } from 'antd-mobile';\nimport OptionView from '../components/OptionView';\n\nclass Count extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            tabList: [OptionView, null],\n            selectIndex: 0\n        }\n    }\n\n    onSelectChange = (selectIndex) => {\n        this.setState({ selectIndex });\n    }\n\n    renderTabList = () => {\n        const { tabList, selectIndex } = this.state;\n        const { count, countAddAction } = this.props;\n\n        return tabList.map((ItemComponent, i) => {\n            return (\n                <TabBar.Item\n                    icon={{ uri: 'https://zos.alipayobjects.com/rmsportal/asJMfBrNqpMMlVpeInPQ.svg' }}\n                    selectedIcon={{ uri: 'https://zos.alipayobjects.com/rmsportal/gjpzzcrPMkhfEqgbYvmN.svg' }}\n                    title=\"My\"\n                    key={`tab_${i}`}\n                    selected={selectIndex === i}\n                    onPress={() => {\n                        this.onSelectChange(i);\n                    }}\n                >\n                    <ItemComponent />\n                </TabBar.Item>\n            );\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <div style={{ position: 'fixed', height: '100%', width: '100%', top: 0 }}>\n                    <TabBar\n                        unselectedTintColor=\"#949494\"\n                        tintColor=\"#33A3F4\"\n                        barTintColor=\"white\"\n                        hidden={false}\n                        tabBarPosition=\"bottom\"\n                        prerenderingSiblingsNumber={1}\n                    >\n                        {this.renderTabList()}\n                    </TabBar>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default connect(\n    (state) => ({\n        count: state.count\n    }),\n    {\n        countAddAction\n    }\n)(Count);","import React, { Component } from 'react';\nimport { Provider } from \"react-redux\";\nimport './App.css';\nimport createStore from './store/createStore';\nimport Home from './containers/home';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={createStore()}>\n        <div className=\"App\">\n          <Home />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd-mobile/dist/antd-mobile.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}